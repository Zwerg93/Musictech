quarkus.datasource.db-kind = postgresql
quarkus.datasource.username = postgres
quarkus.datasource.password = postgres
quarkus.datasource.jdbc.url = jdbc:postgresql://postgresdb:5432/postgres
#172.24.0.2 -> ip in docker network (musictech-backend)

quarkus.hibernate-orm.log.sql = true
#quarkus.rest-client."org.acme.rest.client.multipart.MultipartService".url=http://localhost:8080/
quarkus.http.cors=true
quarkus.http.cors.origins=/http://localhost:(4200|8080)/,/http://192.168.0.22:(4200|8080)/,/http://0.0.0.0:(4200|8080)/,/http://192.168.178.20:(4200|8080)/,/http://172.24.0.3:(4200|8080)/,/http://server:(4200|8080)/
quarkus.http.cors.methods=GET,POST,OPTIONS,PUT
quarkus.http.cors.headers=*
quarkus.http.cors.access-control-max-age=24H
quarkus.http.cors.access-control-allow-credentials=true
quarkus.http.access-log.enabled=true
quarkus.http.host=0.0.0.0
quarkus.http.port=8080
quarkus.http.limits.max-body-size = 200m
#quarkus.hibernate-orm.database.generation=drop-and-create

#quarkus.http.ssl-port=8443
quarkus.package.type=uber-jar

# OIDC Configuration


#%prod.quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus
#quarkus.oidc.client-id=backend-service
#quarkus.oidc.client-secret=secret

# Tell Dev Services for Keycloak to import the realm file
# This property is not effective when running the application in JVM or Native modes

#quarkus.keycloak.devservices.realm-path=quarkus-realm.json





#quarkus.http.ssl.client-auth=required
#quarkus.http.ssl.certificate.key-store-file=META-INF/resources/server.keystore
#quarkus.http.ssl.certificate.key-store-password=server_password

#quarkus.http.ssl.certificate.trust-store-file=META-INF/resources/client.truststore
#quarkus.http.ssl.certificate.trust-store-password=client_password
